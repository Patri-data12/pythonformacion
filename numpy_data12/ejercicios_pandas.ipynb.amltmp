{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Ejercicios Series\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#1. Escribe un programa Pandas para cambiar el tipo de datos de una columna o serie dada. Serie de muestra:\n",
        "\"\"\"    Serie de datos originales:\n",
        "0       100\n",
        "1       200\n",
        "2    python\n",
        "3    300.12\n",
        "4       400\n",
        "dtype: objeto\n",
        "Cambio a numérico:\n",
        "0    100.00\n",
        "1    200.00\n",
        "2       NaN\n",
        "3    300.12\n",
        "4    400.00\n",
        "tipo: float64\"\"\"\n",
        "\n",
        "s = pd.Series([100, 200, 'python', 300.12, 400] ) \n",
        "sn=pd.to_numeric(s,errors='coerce')\n",
        "print(sn)\n",
        "\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "0    100.00\n1    200.00\n2       NaN\n3    300.12\n4    400.00\ndtype: float64\n"
        }
      ],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#2_Escribe un programa Pandas para convertir series de listas en una serie.\n",
        "\"\"\"ConnectionErrorEjemplo de salida:\n",
        "Serie original de listas\n",
        "0    [Red, Green, White]\n",
        "1           [Red, Black]\n",
        "2               [Yellow]\n",
        "dtype: objeto\n",
        "Una serie:\n",
        "0       Red\n",
        "1     Green\n",
        "2     White\n",
        "3       Red\n",
        "4     Black\n",
        "5    Yellow\n",
        "dtype: objeto\"\"\"\n",
        "\n",
        "#from itertools import chain \n",
        "serie = pd.Series([['Red', 'Green', 'White'], ['Red', 'Black'], ['Yellow']])\n",
        "serie.apply(pd.Series).stack().reset_index(drop=True)\n",
        "#serie.apply(pd.Series())\n",
        "#serie2=pd.Series(chain.from_iterable(serie.tolist()))\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "0       Red\n1     Green\n2     White\n3       Red\n4     Black\n5    Yellow\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#3_Escribe un programa Pandas para agregar algunos datos a una serie existente.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie de datos originales:\n",
        "0       100\n",
        "1       200\n",
        "2    python\n",
        "3    300.12\n",
        "4       400\n",
        "dtype: objeto\n",
        "\n",
        "Serie de datos después de agregar algunos datos:\n",
        "0       100\n",
        "1       200\n",
        "2    python\n",
        "3    300.12\n",
        "4       400\n",
        "5       500\n",
        "6       php\n",
        "dtype: objeto\"\"\"\n",
        "\n",
        "s1= pd.Series([100, 200, 'python', 300.12, 400]) \n",
        "# Nuevos datos a agregar \n",
        "datos_nuevos = pd.Series([500, 600]) \n",
        "# Combinar la serie original con los nuevos datos \n",
        "nueva_s1 = pd.concat([s1, datos_nuevos], ignore_index=True) \n",
        "print(\"\\nSerie de datos actualizada:\") \n",
        "print(nueva_s1)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nSerie de datos actualizada:\n0       100\n1       200\n2    python\n3    300.12\n4       400\n5       500\n6       600\ndtype: object\n"
        }
      ],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#4_Escribe un programa Pandas para crear otra serie con un subconjunto de datos según un valor y una condición dada.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie de datos originales:\n",
        "0      0\n",
        "1      1\n",
        "2      2\n",
        "\n",
        "....\n",
        "\n",
        "9      9\n",
        "10    10\n",
        "tipo: int64\n",
        "\n",
        "Subconjunto de la serie de datos anterior:\n",
        "0    0\n",
        "1    1\n",
        "2    2\n",
        "3    3\n",
        "4    4\n",
        "5    5\n",
        "tipo: int64\"\"\"\n",
        "\n",
        "s2=pd.Series(list(range(11)))\n",
        "\n",
        "s2[s2 <= 5]\n",
        "\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 11,
          "data": {
            "text/plain": "0    0\n1    1\n2    2\n3    3\n4    4\n5    5\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 11,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#5_Escribe un programa Pandas para cambiar el orden del índice de una serie dada.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie de datos originales:\n",
        "A    1\n",
        "B    2\n",
        "C    3\n",
        "D    4\n",
        "E    5\n",
        "tipo: int64\n",
        "\n",
        "Serie de datos después de cambiar el orden del índice:\n",
        "B    2\n",
        "A    1\n",
        "C    3\n",
        "D    4\n",
        "E    5\n",
        "tipo: int64\"\"\"\n",
        "\n",
        "#s3=pd.Series({'A':1,'B':2,'C':3,'D':4,'E':5}\n",
        "s3=pd.Sereie(data=[1,2,3,4,5], index['a','b','c','d','e'])\n",
        "print(s3)\n",
        "s3.reindex('b','a','c','d','e')"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "positional argument follows keyword argument (139976186.py, line 20)",
          "traceback": [
            "\u001b[0;36m  Cell \u001b[0;32mIn[12], line 20\u001b[0;36m\u001b[0m\n\u001b[0;31m    s3=pd.Sereie(data=[1,2,3,4,5], index['a','b','c','d','e'])\u001b[0m\n\u001b[0m                                                             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m positional argument follows keyword argument\n"
          ]
        }
      ],
      "execution_count": 12,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#6_Escribe un programa Pandas para obtener los elementos de una serie dada que no están presentes en otra serie dada.\n",
        "\"\"\"Ejemplo de salida:  \n",
        "Serie original:\n",
        "sr1:\n",
        "0    1\n",
        "1    2\n",
        "2    3\n",
        "3    4\n",
        "4    5\n",
        "dtype: int64\n",
        "sr2:\n",
        "0     2\n",
        "1     4\n",
        "2     6\n",
        "3     8\n",
        "4    10\n",
        "dtype: int64\n",
        "\n",
        "Elementos de sr1 no presentes en sr2:\n",
        "0    1\n",
        "2    3\n",
        "4    5\n",
        "tipo: int64\"\"\"\n",
        "\n",
        "sr1=pd.Series([1,2,3,4,5])\n",
        "sr2=pd.Series([2,4,6,8,10])\n",
        "print(sr1)\n",
        "print(sr2)\n",
        "\n",
        "mask=sr1.~isin(sr2)\n",
        "sr1[mask]"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (1902202956.py, line 30)",
          "traceback": [
            "\u001b[0;36m  Cell \u001b[0;32mIn[33], line 30\u001b[0;36m\u001b[0m\n\u001b[0;31m    mask=sr1.~isin(sr2)\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "execution_count": 33,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 35,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#8_Escribe un programa Pandas para calcular los conteos de frecuencia de cada valor único de una serie dada.\n",
        "#9_Escribe un programa Pandas para mostrar el valor más frecuente en una serie dada y reemplazar todo lo demás con el valor 'Otro'.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie original:\n",
        "0     1\n",
        "1     7\n",
        "2     1\n",
        "3     6\n",
        "\n",
        "...\n",
        "\n",
        "\n",
        "37    0\n",
        "38    4\n",
        "39    8\n",
        "dtype: objeto\n",
        "Frecuencia de cada valor único de dicha serie.\n",
        "0    9\n",
        "2    7\n",
        "9    6\n",
        "....\n",
        "3    2\n",
        "4    1\n",
        "5    1\n",
        "tipo: int64\"\"\"\n",
        "\n",
        "nums=np.random.randint(1,5, [15])\n",
        "\n",
        "s4=pd.Series(nums)\n",
        "print(s4)\n",
        "conteo=s4.value_counts()\n",
        "print(conteo)\n",
        "print(conteo.index)\n",
        "print(conteo.index[0])\n",
        "mask = ~s4.isin([conteo.index[0]])\n",
        "s4[mask]='otro'\n",
        "s4\n",
        "\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "0     4\n1     3\n2     4\n3     1\n4     1\n5     4\n6     2\n7     4\n8     4\n9     3\n10    3\n11    1\n12    1\n13    3\n14    3\ndtype: int64\n4    5\n3    5\n1    4\n2    1\ndtype: int64\nInt64Index([4, 3, 1, 2], dtype='int64')\n4\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 51,
          "data": {
            "text/plain": "0        4\n1     otro\n2        4\n3     otro\n4     otro\n5        4\n6     otro\n7        4\n8        4\n9     otro\n10    otro\n11    otro\n12    otro\n13    otro\n14    otro\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 51,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#10_Escribe un programa Pandas para obtener las posiciones de los elementos de una serie dada en otra serie dada.\n",
        "\"\"\"Ejemplo de salida:  \n",
        "Serie original:\n",
        "0     1\n",
        "1     2\n",
        "2     3\n",
        "3     4\n",
        "4     5\n",
        "5     6\n",
        "6     7\n",
        "7     8\n",
        "8     9\n",
        "9    10\n",
        "tipo: int64\n",
        "0     1\n",
        "1     3\n",
        "2     5\n",
        "3     7\n",
        "4    10\n",
        "tipo: int64\n",
        "Posiciones de los elementos de la serie 2 en la serie 1:\n",
        "[0, 2, 4, 6, 9]\"\"\"\n",
        "\n",
        "s5=pd.Series([1,2,3,4,5,6,7,8,9,10])\n",
        "\n",
        "posiciones=[0,2,4,6,9]\n",
        "serie_de_s5=s5.iloc[posiciones]\n",
        "print(serie_de_s5)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "0     1\n2     3\n4     5\n6     7\n9    10\ndtype: int64\n"
        }
      ],
      "execution_count": 17,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#11_Escribe un programa Pandas que convierta el primer y el último carácter de cada palabra a mayúsculas en cada palabra de una serie dada.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie original:\n",
        "0       php\n",
        "1    python\n",
        "2      java\n",
        "3        c#\n",
        "dtype: objeto\n",
        "\n",
        "Primer y último carácter de cada palabra en mayúscula:\n",
        "0       PhP\n",
        "1    PythoN\n",
        "2      JavA\n",
        "3        C#\n",
        "dtype: objeto\"\"\"\n",
        "\n",
        "s6 = pd.Series(['php','python','java','c#'])\n",
        "def mayusculas(palabra):\n",
        "    if len(palabra) > 1:\n",
        "        return palabra[0].upper() + palabra[1:-1] + palabra[-1].upper()\n",
        "    else:\n",
        "        return palabra.upper()  \n",
        "\n",
        "#result=s6.apply(lambda x: x[0]+x[1:-1]+x[-1]).upper())\n",
        "s6_nueva=s6.apply(mayusculas)\n",
        "print(s6_nueva)"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'pd' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[1], line 17\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#11_Escribe un programa Pandas que convierta el primer y el último carácter de cada palabra a mayúsculas en cada palabra de una serie dada.\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;124;03m\"\"\"Ejemplo de salida:\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;124;03mSerie original:\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;124;03m0       php\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;124;03m3        C#\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124;03mdtype: objeto\"\"\"\u001b[39;00m\n\u001b[0;32m---> 17\u001b[0m s6 \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241m.\u001b[39mSeries([\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mphp\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mjava\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mc#\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmayusculas\u001b[39m(palabra):\n\u001b[1;32m     19\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(palabra) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n",
            "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1737621824154
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#12_Escribe un programa Pandas para calcular la diferencia de diferencias entre números consecutivos de una serie dada.\n",
        "\"\"\"Ejemplo de salida:\n",
        "Serie original:\n",
        "0     1\n",
        "1     3\n",
        "2     5\n",
        "3     8\n",
        "4    10\n",
        "5    11\n",
        "6    15\n",
        "tipo: int64\n",
        "\n",
        "Diferencia de diferencias entre números consecutivos de la serie:\n",
        "[nan, 2.0, 2.0, 3.0, 2.0, 1.0, 4.0]\n",
        "[nan, nan, 0.0, 1.0, -1.0, -1.0, 3.0]\"\"\"\n",
        "\n",
        "s7=pd.Series([1,3,5,8,10,11,15])\n",
        "\n",
        "diferencias = s7.diff()\n",
        "\n",
        "diferencias_diferencias = diferencias.diff()\n",
        "print(diferencias_diferencias)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "0    NaN\n1    NaN\n2    0.0\n3    1.0\n4   -1.0\n5   -1.0\n6    3.0\ndtype: float64\n"
        }
      ],
      "execution_count": 23,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.11",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}